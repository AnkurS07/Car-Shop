/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.carshop.application;

import static ca.mcgill.ecse223.carshop.controller.AppointmentController.parseDate;

import java.io.File;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import ca.mcgill.ecse.carshop.model.BusinessHour;
import ca.mcgill.ecse.carshop.model.BusinessHour.DayOfWeek;
import ca.mcgill.ecse.carshop.model.CarShop;
import ca.mcgill.ecse.carshop.model.Customer;
import ca.mcgill.ecse.carshop.model.Garage;
import ca.mcgill.ecse.carshop.model.Service;
import ca.mcgill.ecse.carshop.model.Technician;
import ca.mcgill.ecse.carshop.model.Technician.TechnicianType;
import ca.mcgill.ecse.carshop.model.TimeSlot;
import ca.mcgill.ecse.carshop.view.CarShopPage;
import ca.mcgill.ecse223.carshop.controller.AppointmentController;
import ca.mcgill.ecse223.carshop.controller.CarShopController;
import ca.mcgill.ecse223.carshop.persistence.CarshopPersistence;

public class CarShopApplication {
	
	private static CarShop carShop;
	private static java.util.Date systemDate;
	private static String loggedInUser;
	
    public String getGreeting() {
        return "Starting CarShop Application...";
    }

    public static void main(String[] args) throws Exception{
    	// Demo Parameters 
    	//   (Don't use the UI and the console demo at the same time to avoid duplicate problems)
    	//	 (Always clear the save before the console demo to avoid duplicate problems)
    	boolean clearSave = false;
    	boolean consoleDemo = false;
    	boolean runUI = true;
    	
        System.out.println(new CarShopApplication().getGreeting() + "\n");
        System.out.println(
        		"Demo parameters :\n\tClear save:\t"+clearSave+
        		"\n\tConsole demo:\t"+consoleDemo+
        		"\n\tShow UI:\t"+runUI+"\n");
        
        // Clearing previous save (For demo)
        if (clearSave) {
            System.out.println("Clearing previous CarShop Save...\n");
            clearCarShopSave();
        }
        
        // Console Demo
        if (consoleDemo) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd+hh:mm");  
            LocalDateTime now = LocalDateTime.now();  
            Date systemDate = AppointmentController.parseDate(dtf.format(now), "yyyy-MM-dd+hh:mm");
            CarShopApplication.setSystemDate(systemDate);
            
            // Initiating CarShop
            System.out.println("Initiating the CarShop...\n");
            carShop = CarShopApplication.getCarShop();
            
            // Owner point of view
            System.out.println("--------------------------------------------------------------------------\n");
            System.out.println("========================== OWNER POINT OF VIEW ===========================\n");
            // Creating the owner
            System.out.println("Action: Creating the owner account.");
            CarShopController.createOwner("owner", "owner");
            System.out.println("Result: The owner has username \"" + carShop.getOwner().getUsername() + "\" and password \"" + carShop.getOwner().getPassword() + "\".\n");
            
            // Failing to login the owner
            System.out.println("Action: Attempting to login with wrong password.");
            try {
            	CarShopController.logIn("owner", "onwre");
            } catch (Exception e) {
            	System.out.println("Error: " + e.getMessage() + ".");
            }
            System.out.println("Result: The logged in user is \"" + getLoggedInUser() + "\".\n");
            
            // Logging in the owner
            System.out.println("Action: Logging in with the onwer account.");
            CarShopController.logIn("owner", "owner");
            System.out.println("Result: The logged in user is \"" + getLoggedInUser() + "\".\n");
            
            // Setting up the business
            System.out.println("Action: Setting up business informations.");
            CarShopController.SetUpBusinessInformation("CarShop 15", "15 Garage Av.", "027-111-2233", "carshop15@carshop.ca");
            System.out.println("Result:\tName of the business:\t\t" + carShop.getBusiness().getName() +
            				"\n\tAddress of the business:\t" + carShop.getBusiness().getAddress() +
            				"\n\tPhone number of the business:\t" + carShop.getBusiness().getPhoneNumber() +
            				"\n\tEmail of the business:\t\t" + carShop.getBusiness().getEmail() + "\n"
            		);
            
            // Updating business informations
            System.out.println("Action: Updating business phone number.");
            CarShopController.updateBusinessInformation("CarShop 15", "15 Garage Av.", "777-777-7777", "carshop15@carshop.ca");
            System.out.println("Result:\tName of the business:\t\t" + carShop.getBusiness().getName() +
            				"\n\tAddress of the business:\t" + carShop.getBusiness().getAddress() +
            				"\n\tPhone number of the business:\t" + carShop.getBusiness().getPhoneNumber() +
            				"\n\tEmail of the business:\t\t" + carShop.getBusiness().getEmail() + "\n"
            		);
            
            // Adding business hours
            System.out.println("Action: Adding business hours.");
            Time openTime = new Time((parseDate("8:00", "HH:mm")).getTime());
            Time closeTime = new Time((parseDate("17:00", "HH:mm")).getTime());
            CarShopController.addBusinessHour(DayOfWeek.Monday, openTime, closeTime);
            CarShopController.addBusinessHour(DayOfWeek.Tuesday, openTime, closeTime);
            CarShopController.addBusinessHour(DayOfWeek.Wednesday, openTime, closeTime);
            CarShopController.addBusinessHour(DayOfWeek.Thursday, openTime, closeTime);
            CarShopController.addBusinessHour(DayOfWeek.Friday, openTime, closeTime);
            
            System.out.println(
            		"Result:\tMonday:\t\t" + carShop.getBusiness().getBusinessHour(0).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(0).getEndTime() +
    				"\n\tTuesday:\t" + carShop.getBusiness().getBusinessHour(1).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(1).getEndTime() +
    				"\n\tWednesday:\t" + carShop.getBusiness().getBusinessHour(2).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(2).getEndTime() +
    				"\n\tThursday:\t" + carShop.getBusiness().getBusinessHour(3).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(3).getEndTime() +
    				"\n\tFriday:\t\t" + carShop.getBusiness().getBusinessHour(4).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(4).getEndTime() + "\n"
    		);
            
            // Updating business hours
            System.out.println("Action: Updating Friday business hours.");
            Time newCloseTime = new Time((parseDate("14:00", "HH:mm")).getTime());
            CarShopController.updateBusinessHour(DayOfWeek.Friday, openTime, DayOfWeek.Friday, openTime, newCloseTime);
            System.out.println(
            		"Result:\tMonday:\t\t" + carShop.getBusiness().getBusinessHour(0).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(0).getEndTime() +
    				"\n\tTuesday:\t" + carShop.getBusiness().getBusinessHour(1).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(1).getEndTime() +
    				"\n\tWednesday:\t" + carShop.getBusiness().getBusinessHour(2).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(2).getEndTime() +
    				"\n\tThursday:\t" + carShop.getBusiness().getBusinessHour(3).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(3).getEndTime() +
    				"\n\tFriday:\t\t" + carShop.getBusiness().getBusinessHour(4).getStartTime() + " to " + carShop.getBusiness().getBusinessHour(4).getEndTime() + "\n"
    		);
            
            // Creating Technicians Accounts
            System.out.println("Action: Creating technicians accounts.");
            CarShopController.createTechnician("Tire-Technician", "tech_pass2", TechnicianType.Tire);
            CarShopController.createTechnician("Engine-Technician", "tech_pass1", TechnicianType.Engine);
            CarShopController.createTechnician("Transmission-Technician", "tech_pass3", TechnicianType.Transmission);
            CarShopController.createTechnician("Electronics-Technician", "tech_pass4", TechnicianType.Electronics);
            CarShopController.createTechnician("Fluids-Technician", "tech_pass5", TechnicianType.Fluids);
            System.out.println("Result: Registered Technicians: ");
            for (Technician tech : carShop.getTechnicians()) {
            	System.out.println("\t\tUsername: "+tech.getUsername()+" | Password: "+tech.getPassword()+" | Type: "+tech.getType());
            }
            System.out.print("\n");
            
            
            // Adding Services
            System.out.println("Action: Adding new services.");
            CarShopController.addService("tire-change", 20, carShop.getGarage(0));
            CarShopController.addService("transmission-check", 40, carShop.getGarage(2));
            CarShopController.addService("engine-check", 60, carShop.getGarage(1));
            CarShopController.addService("electronics-repair", 30, carShop.getGarage(3));
            System.out.println("Result: Registered services: ");
            for (Garage g : carShop.getGarages()) {
            	for (Service s : g.getServices()) {
                	System.out.println("\t\tName: "+s.getName()+" | Duration: "+s.getDuration() + " minutes");
            	}
            }
            System.out.print("\n");
                    
            // Adding Service Combo
            System.out.println("Action: Adding new service combo.");
            CarShopController.defineServiceCombo(loggedInUser, "transmission-check-combo", "tire-change,transmission-check,electronics-repair,engine-check", "false,true,true,false", "transmission-check");
            System.out.println("Result: Registered service combo: ");
            System.out.println("\t\tName: " + carShop.getBookableService(carShop.numberOfBookableServices()-1).getName() + "\n");
                    
            // Log out owner
            System.out.println("Action: Logging out owner.");
            CarShopController.logout();
            System.out.println("Result: The logged in user is \"" + getLoggedInUser() + "\".\n");
            
            // Customer point of view
            System.out.println("--------------------------------------------------------------------------\n");
            System.out.println("========================= CUSTOMER POINT OF VIEW =========================\n");
            
            // Creating customer accounts
            System.out.println("Action: Creating two customer accounts.");
            CarShopController.createCustomer("customer1", "12345");
            CarShopController.createCustomer("customer2", "54321");
            System.out.println("Result: Registered customers: ");
            for (Customer c : carShop.getCustomers()) {
            	 System.out.println("\t\tUsername: \"" + c.getUsername() + "\" | Password: \"" + c.getPassword() + "\"");
            }
            System.out.print("\n");
            
            // Logging in a customer
            System.out.println("Action: Logging in with a customer account.");
            CarShopController.logIn("customer1", "12345");
            System.out.println("Result: The logged in user is \"" + getLoggedInUser() + "\".\n");
            
            // Failing to update customer account
            System.out.println("Action: Trying to update account with a username already used.");
            try {
            	CarShopController.updateCustomer("customer2", "12345");
            } catch (Exception e) {
            	System.out.println("Error: " + e.getMessage() + ".");
            }
            System.out.println("Result: Registered customers: ");
            for (Customer c : carShop.getCustomers()) {
           	 	System.out.println("\t\tUsername: \"" + c.getUsername() + "\" | Password: \"" + c.getPassword() + "\"");
            }
            System.out.print("\n");
            
            // Updating customer account
            System.out.println("Action: Updating account with a new password.");
            CarShopController.updateCustomer("customer1", "ABCDE");
            System.out.println("Result: Registered customers: ");
            for (Customer c : carShop.getCustomers()) {
           	 	System.out.println("\t\tUsername: \"" + c.getUsername() + "\" | Password: \"" + c.getPassword() + "\"");
            }
            System.out.print("\n");
            
            // Making an appointment (not done)
            Date startDate = AppointmentController.parseDate("2021-04-14", "yyyy-MM-dd");
            Date endDate = startDate;
            Time startTime1 = new Time((parseDate("10:00", "HH:mm")).getTime());
            Time endTime1 = new Time((parseDate("10:40", "HH:mm")).getTime());
            Time startTime2 = new Time((parseDate("10:40", "HH:mm")).getTime());
            Time endTime2 = new Time((parseDate("11:10", "HH:mm")).getTime());
            TimeSlot ts1 = new TimeSlot(startDate, startTime1, endDate, endTime1, carShop);
            TimeSlot ts2 = new TimeSlot(startDate, startTime2, endDate, endTime2, carShop);
            List<TimeSlot> timeSlots = new ArrayList<TimeSlot>();
            timeSlots.add(ts1);
            timeSlots.add(ts2);
            List<Service> optionalServices = new ArrayList<Service>();
            optionalServices.add(carShop.getGarage(3).getService(0));
//            for (BusinessHour bh : carShop.getBusiness().getBusinessHours()) {
//            	for (Garage g : carShop.getGarages()) {
//                	g.addBusinessHour(bh);
//                }
//            }
//            System.out.println("Action: Making an appointment.");
//            AppointmentController.makeAppointment(false, carShop.getCustomer(0), "transmission-check", startDate, startTime1, timeSlots, carShop.getBookableService(1), optionalServices, new ArrayList<TimeSlot>());
//            System.out.println("Result: Registered appointment: ");
//            System.out.println(
//            		"\t\tStatus: " + carShop.getAppointment(0).getAppStatus() + 
//            		"\n\t\tCustomer: " + carShop.getAppointment(0).getCustomer().getUsername() +
//            		"\n\t\tDate: " + carShop.getAppointment(0).getServiceBooking(0).getTimeSlot().getStartDate() +
//            		"\n\t\tService: " + carShop.getAppointment(0).getServiceBooking(0).getService().getName() +
//    				"\n\t\t\tStart time: " + carShop.getAppointment(0).getServiceBooking(0).getTimeSlot().getStartTime() +
//    				"\n\t\t\tEnd time: " + carShop.getAppointment(0).getServiceBooking(0).getTimeSlot().getEndTime() +
//    				"\n\t\tService: " + carShop.getAppointment(0).getServiceBooking(1).getService().getName() +
//    				"\n\t\t\tStart time: " + carShop.getAppointment(0).getServiceBooking(1).getTimeSlot().getStartTime() +
//    				"\n\t\t\tEnd time: " + carShop.getAppointment(0).getServiceBooking(1).getTimeSlot().getEndTime() + "\n"
//    		);
//            
//            // Log out customer
//            System.out.println("Action: Logging out customer.");
//            CarShopController.logout();
//            System.out.println("Result: The logged in user is \"" + getLoggedInUser() + "\".\n");
//            
//            // Appointment Management
//            System.out.println("--------------------------------------------------------------------------\n");
//            System.out.println("========================= APPOINTMENT MANAGEMENT =========================\n");
//            
//            // Adding a service to the combo
//            List<Service> newServices = new ArrayList<Service>();
//    		newServices.add(carShop.getGarage(0).getService(0));
//    		Time startTime3 = new Time((parseDate("11:10", "HH:mm")).getTime());
//            Time endTime3 = new Time((parseDate("11:30", "HH:mm")).getTime());
//    		TimeSlot ts3 = new TimeSlot(startDate, startTime3, endDate, endTime3, carShop);
//    		List<TimeSlot> newTimeSlots = new ArrayList<TimeSlot>();
//    		newTimeSlots.add(ts3);
//            System.out.println("Action: Adding a service to the combo.");
//            AppointmentController.updateAppointment(true, false, carShop.getCustomer(0), carShop.getAppointment(0), newServices, newTimeSlots, systemDate);
//            System.out.println("Result: Registered appointment: ");
//            System.out.println(
//            		"\t\tStatus: " + carShop.getAppointment(0).getAppStatus() + 
//            		"\n\t\tCustomer: " + carShop.getAppointment(0).getCustomer().getUsername() +
//            		"\n\t\tDate: " + carShop.getAppointment(0).getServiceBooking(0).getTimeSlot().getStartDate() +
//            		"\n\t\tService: " + carShop.getAppointment(0).getServiceBooking(0).getService().getName() +
//    				"\n\t\t\tStart time: " + carShop.getAppointment(0).getServiceBooking(0).getTimeSlot().getStartTime() +
//    				"\n\t\t\tEnd time: " + carShop.getAppointment(0).getServiceBooking(0).getTimeSlot().getEndTime() +
//    				"\n\t\tService: " + carShop.getAppointment(0).getServiceBooking(1).getService().getName() +
//    				"\n\t\t\tStart time: " + carShop.getAppointment(0).getServiceBooking(1).getTimeSlot().getStartTime() +
//    				"\n\t\t\tEnd time: " + carShop.getAppointment(0).getServiceBooking(1).getTimeSlot().getEndTime() +
//    				"\n\t\tService: " + carShop.getAppointment(0).getServiceBooking(2).getService().getName() +
//    				"\n\t\t\tStart time: " + carShop.getAppointment(0).getServiceBooking(2).getTimeSlot().getStartTime() +
//    				"\n\t\t\tEnd time: " + carShop.getAppointment(0).getServiceBooking(2).getTimeSlot().getEndTime() + "\n"
//    		);
//            
//            // Logging in the owner
//            System.out.println("Action: Logging in with the onwer account.");
//            CarShopController.logIn("owner", "owner");
//            System.out.println("Result: The logged in user is \"" + getLoggedInUser() + "\".\n");
//            
//            // Trying to start the appointment early
//            Date earlyDate = AppointmentController.parseDate("2021-04-14+09:00", "yyyy-MM-dd+hh:mm");
//            CarShopApplication.setSystemDate(earlyDate);
//            System.out.println("Action: Trying to start the appointment early.");
//            try {
//            	AppointmentController.startAppointment(earlyDate, carShop.getAppointment(0));
//            } catch (Exception e) {
//            	System.out.println("Error: " + e.getMessage());
//            }
//            System.out.println("Result: Appointment status: " + carShop.getAppointment(0).getAppStatus() + "\n");
//            
//            // Starting the appointment
//            Date onTimeDate = AppointmentController.parseDate("2021-04-14+10:00", "yyyy-MM-dd+hh:mm");
//            CarShopApplication.setSystemDate(onTimeDate);
//            System.out.println("Action: Starting the appointment.");
//            AppointmentController.startAppointment(onTimeDate, carShop.getAppointment(0));
//            System.out.println("Result: Appointment status: " + carShop.getAppointment(0).getAppStatus() + "\n");
//            
//            // Ending the appointment
//            Date endTimeDate = AppointmentController.parseDate("2021-04-14+11:30", "yyyy-MM-dd+hh:mm");
//            CarShopApplication.setSystemDate(endTimeDate);
//            System.out.println("Action: Ending the appointment.");
//            AppointmentController.endAppointment(endTimeDate, carShop.getAppointment(0));
//            System.out.println("Result: Remaining appointments: " + carShop.getAppointments()+"\n");
        }
        
        if (clearSave && !consoleDemo) CarShopController.createOwner("owner", "owner");

        // Run the UI
        if (runUI) {
        	System.out.println("Launching UI...");
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new CarShopPage().setVisible(true);
                }
            });
        }
    }

	public static CarShop getCarShop() {
    	if (carShop == null) {
    		carShop = CarshopPersistence.load();
    	}
    	return carShop;
    	
    }
    
	/**
	 * Gets the current logged in user of the system.
	 * @return The current logged in user of the system.
	 * @throws Exception
	 */
	public static String getLoggedInUser() throws Exception {
		try {
			return loggedInUser;
		}
		catch (RuntimeException e) {
			throw new Exception(e.getMessage());
		}
	}

	/**
	 * Sets the current logged in user of the system.
	 * @return 
	 * @throws Exception
	 */	
	public static void setLoggedInUser(String loggedInUser) throws Exception {
		try {
			CarShopApplication.loggedInUser = loggedInUser;
		}
		catch (RuntimeException e) {
			throw new Exception(e.getMessage());
		}
	}
	
	/**
	 * Gets the current date of the system. Be careful, this uses java.util.date unlike the Date in the Umple models that is of type java.sql.Date
	 * @return The current date of the system.
	 * @throws Exception
	 */
	public static java.util.Date getSystemDate() throws Exception {
		try {
			return systemDate;
		}
		catch (RuntimeException e) {
			throw new Exception(e.getMessage());
		}
	}
	
	/**
	 * Sets the current date of the system. Uses a Singleton class to persist information.
	 * @param date Date to be set.
	 * @throws Exception
	 */
	public static void setSystemDate(java.util.Date date) throws Exception {
		try {
			CarShopApplication.systemDate = date;
		}
		catch (RuntimeException e) {
			throw new Exception(e.getMessage());
		}
	}
	
	// Helper method that clears the save by deleting the save file
    private static void clearCarShopSave() {
    	File saveFile = new File("data.carshop"); 
        saveFile.delete();
	}
}
